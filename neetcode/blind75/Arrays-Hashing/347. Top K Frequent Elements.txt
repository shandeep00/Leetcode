/*
https://leetcode.com/problems/top-k-frequent-elements

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
*/

//TC:O(n*k), SC:O(n)
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> frequency = new HashMap<>();
        int maxFreq = 0;
        for (int n : nums) {
            frequency.put(n, frequency.getOrDefault(n, 0) + 1);
            maxFreq = Math.max(maxFreq, frequency.get(n));
        }
        List<Integer>[] count = new List[maxFreq];

        for (Map.Entry<Integer, Integer> e : frequency.entrySet()) {
            if (count[e.getValue() - 1] == null) {
                count[e.getValue() - 1] = new ArrayList<>();
            }
            count[e.getValue() - 1].add(e.getKey());
        }
        int[] out = new int[k];

        for (int i = maxFreq - 1; i >= 0 && k > 0; i--) {
            if (count[i] != null) {
                for (int j = 0; j < count[i].size() && k > 0; j++) {
                    out[out.length - k] = count[i].get(j);
                    k--;
                }
            }
        }

        return out;
    }
}
