/*
https://leetcode.com/problems/valid-parentheses/description/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 10^4
s consists of parentheses only '()[]{}'.
*/

//TC:O(n), SC:O(n)
class Solution { 
    public boolean isValid(String s) {
        Stack<Character> brackets = new Stack();
        for (char c : s.toCharArray()) {
            if (c == '(') {
                brackets.add(')');
            } else if (c == '[') {
                brackets.add(']');
            } else if (c == '{') {
                brackets.add('}');
            } else if (brackets.empty() || c != brackets.pop()) {
                return false;
            }
        }

        return brackets.empty();
    }
}
